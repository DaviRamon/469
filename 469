-- Script
local books = {
	-- '659978 54764!', '653768764!', -- Said by Elder Bonelord
	-- '468468', -- Blinky
	-- '1', -- Tibia
	-- '78572611857643646724', -- A Wrinkled Bonelord
	-- '485611800364197', -- A Wrinkled Bonelord
	-- '3478 67 90871 97664 3466 0 345', -- Npc nightmare
	-- '653768764!', -- The Evil Eye

	-- 3478 is Bonelord ?
	('Module'..
'  name: client_topmenu'..
'  description: Create the top menu'..
'  author: edubart'..
'  website: www.otclient.info'..
'  scripts:  topmenu '..
'  sandboxed: true'..
'  @onLoad: init'..
'  @onUnload: terminate'),
	-- First Bookcase
	-- '56114572785726118576436467243534527560192889521973536467249684756019968477090889521972781670512164856114519199118003646889521991180065128',
	-- '180036468895219911800651288952364672119118003576513534783046467972783967340579282758576512527570584521765219727830464876515956461141451988997',
	-- '7830203118065719189434346465180091146460036467128881911800356114726116467136464612197803646472611451451948561145190421595604215857652',

	-- -- Second Bookcase
	-- '72789431519118519118018944521972788943834350812434856114519121670467261145800369042204648451911452197271288952195945765128895003621512889521961',
	-- '383435081243485611451912167046726114580036904220464845191145219727128895219594576512889500362151288952196114364585611451904509118003158604215857651288724348561145196726114519',

	-- -- Third Bookcase
	-- '017464834943435282177830457651288952197251081658550649911800364',
	-- '50843485611457278572611857643646724353452756019288952197353646724968475601996847709088952197278167051216485611451919911800364688952199118006512889523646721191180035765135347830',

	-- -- Fourth Bookcase
	-- '57278572611857643646724353452756019285611451919911800364688952199118006512889523646721191180035765135347830508434856114',
	-- '21972789431519118519118018944521972',
	-- '40421585765121615180094343508434856114572785726118576436467243534527560192889521973536467249684756019968477090889521972781670512164856114519199118003646889521991180065128',

	-- -- Fifth Bookcase
	-- '094343508434856118003641973536467249684756019968477090889521688952199118006512814572785726118576436467243534527560192889529727816705121648561145191991',

	-- -- Sixth Bookcase
	-- '23646721191180035765135347830464679727839673405792827585765125275705845217652197278304648765159564611414519889975159537243485612783020',
	-- '57652197278943151911851911801894452197278894383435081243485',

	-- -- Seventh Bookcase
	-- '435282177830457651288952197251081658550649911800364672431',
	-- '94576512889506512889500362151288952196114364585611451904509118003150362151288952196114364585611451904509118003159457',
	-- '65128895236467211911800357651353478304645601996847709088952197278167051216483435084348561145727857261185764364672435345275601928867972783994689521991180067340579282758576512527570584521765219727830464876515956461141451988997514672496847952197353561145191991180036468',

	-- -- Eighth Bookcase
	-- '61143128895003624968475601996585506499670467261145800369042204648451911889521977128895219594576552364672119118003575765460036467118001401525517',
	-- '34856251081146364672435345158604215857744545190450421595615135347801928895216019936467243142789431519118651281911800356114726116467136464612',

	-- -- Ninth Bookcase
	-- '18003646889521991261145145198561145190830457651228217735084348562847468898052103649915991186745194688952199153452744647261145145194856114506553452744647261145145194856114506563561145198675635611451919911800364688952199126114511991',

	-- -- Tenth Bookcase
	-- '956151353478019288952160199364672431427894315191186512819118003561147261164671364646121978585765197292197278167054671180014015255175191180189445',
	-- '22953452744647261145145194856114519083045765122821773508434856284770908895243485611216480065',
	-- '867563561145191991180036468895219911036512889672127788943887215128895219618003114572785726118576421970968057963661252757058452176521972783046487651595646114145198899751121615180',

	-- -- Eleventh Bookcase
	-- '85765943442159560421830246465180099673405792827843508195372434856251081146364672435546003614519121128883046467972783160134515860421585774454519045042159561513534780192889521601993646724314278943151911865128191180035611472611646713646461219785857651972921972781670546711800',
	-- '81953724348562510811463646724355460036145191211288830464679727831601345158604215857744545190450421595615135347801928895216019936467243142789485765943442159560421830246465180099673405792827843503151911865128191180035611472611646713646461219785857651972921972781670546711800',

	-- -- Twelfth Bookcase
	-- '78167051216480065861143128895003624968475601996585506499670467261145800369042204648451911889521977128895219594576552364672119118003575765460',
	-- '94576559967046726114580512164800658611431288950036249684756019032364672119178121977128895219518003575765460670965855064690422046484519118895',

	-- -- Thirteenth Bookcase
	-- '857744545190450421595615135347801928895216019936467243142789431519118651281911800356114726116467186418005458561197353646724348561145196726114519031180657191894343180014',
	-- '0152551751911801894521765219727830464876515956461141454522953452744647261145145194856114519083045765122821773508434856236464612197858576',
	-- '5197292197278167054671847709088952434856112164800658675635611451919911800364666125275705819889521991103651288967212778894388721512889521961800311457278572611857642197096805796389975112115',

	-- -- Fourteenth Bookcase
	-- '9746483494727830404215857659434421595604218302031180657191894345219911843508124348561145191211288830464679727831601343545219721277709096734709201285719',

	-- -- Fifteenth Bookcase
	-- '65128896721277889438872151288952196180031145727857261185764219709680579636612527570584521765219727830464876515956461141451988997511216151',

	-- -- Sixteenth Bookcase
	-- '5345274464726114514519485611451908304576512282177350843485628477090889524348561121648006586756356114519199118003646889521991',

	-- -- Seventeenth Bookcase
	-- '53452744619083045765122821773508434856284770908895243991180036468895219915345274464726114514519485611450658675635611451919911800364688952199126114514519485611451908304576512282177350843485628474856112164804770908895243485611216480065867563561145191',

	-- -- Eighteenth Bookcase
	-- '819537243485625108114636467243554600361451912112888304646797278316013451586042158577445451904504215956151353478019288952160199364672431427894',

	-- -- Nineteenth Bookcase
	-- '8550649967046726114580036904220464845191188952197712889521959457655236467211911800357576746483494343545217709096734709201285719727830404215857659',

	-- -- Twentieth Bookcase
	-- '219727816705121648006586114312889500362496847560199658550649967046726114580036904220464845191188952197712889521959457655236467',
	-- '21191180035757654600364671180014015255175191180189445229534527477090967347092012857197278304042158576594344215956042183020311806571918943434646518009',

	-- -- Twenty-First Bookcase
	-- '480065861143128895003624968475601996585506499670467261145800369042204648451911889521977128895219594576552364672119118003575765',
	-- '460036467118001401525517519118018944522953452744647261145145194856114519083045765122821773508434856275635611451919911800364688',
	-- '9521991184350812434856114519121128883046467972783160174648349434354521972127770909673470920128571972783040421585765943442159560421830203118065719189434',

	-- -- Twenty-Second Bookcase
	-- '275857651972788943887215128895219618003114572785726118576421970968057963661252757058452176521972783046487651595646114145198899751121615180059537243485625108114636467243534515860421585774454519045042159561513534780192889521601993646724314278943151911865128191180035611472611',
	-- '3046484353451586042157651595646190186559537243485625108145042159561513534780192889115191414519889971463646728577511216151800672431427894314454552160199364128191180035611472611',
	-- '8435345158675112167610625140815953478019288911519141451988997146364751352854215765159564619018655953724385',

	-- -- Twenty-Third Bookcase
	-- '11857642197096805796366125275705845217652197278304648765159564611414519889975112161518005458561197353646724348561145196726114519031180657191894343',
	-- '1143128895003624968475601996585506499670467261145800369042204648451911889521977128895219594576552364672119118003575767464834943435452177090967347092012',

	-- -- Twenty-Fourth Bookcase
	-- '84350819215956151367972783160134515860421585774454519045045347801928895216019979282753724348562510811463646724355460036145191211288830464',

	-- -- Twenty-Fifth Bookcase
	-- '5191186512819118003561147261164671364646121978036464726114514519485611451908304576512282177350843485627563561145191991180036468895219911843508124348561145191211',

	-- -- Twenty-Sixth Bookcase
	-- '8550649967046726114580036904220464845191188952197712889521959457655236467211911800357576746483494343545217709096734709201285719727830404215857659',

	-- -- Twenty-Seventh Bookcase
	-- '1180014015255175191180189445229534527477090967347092012857197278304042158576594344215956042183020311806571918943434646518009967340579282758576519727889438872151288952196180031145727857261185764219709680579636612527570584521765219727830464876515956461141',
	-- '451988997511216151800595372434856251081146364672435345158604215857744545190450421595615135347801928895216019936467243142789431',

	-- -- Twenty-Eighth Bookcase
	-- '9658550649967046726114580036904220464845191188952197712889521959457655236467211911800357576746483494343545217709096734709201285719727830404215857659434421595604218302464',

	-- -- Twenty-Ninth Bookcase
	-- '7816705747709096121648006586114312889500362496847560199658550649967046726114580036904220464845191188952197712889521959457655236467211911800357576546003646711800140152551751911801894452295345273470920128571972783040421585765943442159560421830203118065719189434346465180099673',

	-- -- Thirtieth Bookcase
	-- '65180099673405792827843508195372434856251081146364672435546003614519121128883046467972783160134515860421585774454519045042159561513534780',
	-- '19288952160199364672431427894315191186512819118003561147261164671364646121978585765197292197278167054671180014015255175191180189445229',

	-- -- Thirty-First Bookcase
	-- '9521961800311457278572611857642197096805796366125275705845217652197278304648765159564611414519889975112161518005458561197353646724348561145196726114519031180657191894343',

	-- -- Thirty-Second Bookcase
	-- '042159561513534780192889521601993646724314278943151911865128191180035611472611646713646461219785857651972921972781670546711800140152551751911801894452295345274464726114514519485611451908304576512282177350843485',
	-- '62847709088952434856112164800658675635611451919911800364688952199110365128896721277889438872151288',

	-- -- Thirty-Third Bookcase
	-- '978585765197292197278167054671180014015255175191180350843485628477090889524348561121648006586',
	-- '756356114519199118003646889521991103345274464726114514519485611451908304576512282177451904504215956151353478019288952160199364672',

	-- -- Thirty-Fourth Bookcase
	-- '467252197752364672119118003575765460036467118001401525522012889521959175191180189445229534526114580036904457654648451911889',

	-- -- Thirty-Fifth Bookcase
	-- '6797577144583160132745193515860421585774458316013451586042150860421584515860421585774451601345154504838577445860134',

	-- -- Thirty-Sixth Bookcase
	-- '46472611451451948561145190830457651228217735084348562756356114519199118003646889521991184350812434856114519121128883046467972783160174648349434354521972127',
	-- '585765197278894388721512889521961800311457278572611857642197096805796366125275705845217652197278304648765159564611414519889975112161518005953724348562510811463646724353451586042158577445451904504215956151353478019288952160199364672431427894315191186512819118003561147261164671364646121978036512',

	-- -- Thirty-Seventh Bookcase
	-- '219605796366125275889031176515956461141451988997511216151808675635611451919911800364688952199113887215127788945036457512889672127058452176521972783046481802785726118576421970968',

	-- -- Thirty-Eighth Bookcase
	-- '4519045042159561513534780192889521601993646724314278943151911865128191180035611472611646713646461219785857651972921972781670546711800140152551751911801894452295345274464726114514519485611451908304576512282177350843485628477090889524348561121648006586756356114519199118003646889521991103',

	-- -- Thirty-Ninth Bookcase
	-- '04215956151353478019288952160199364672431427894315191186512819118003561147261164671364646121978585765197292197278167054671180014015255175191180189445229534527446472611451451948561145190830457651228217735084348562847709088952434856112164800658675635611451919911800364688952199110365',
	-- '79282784350819537243485625108114636467243554600361451912112888304646797278316013451586042158577445451904504215956151353478019288952160199',

	-- -- Fortieth Bookcase
	-- '800595372434856251081146364672435345158604215857744545190450421595615135347801928895216019936467243142789431519118651281911800356114726116467',
	-- '5460036467118001401525517519118018944522953452747709096734709201285719727830404215857659434421595604218302031180657191894343464651800996734057928275857651972788943887215128895219618003114572785726118576421970968057963661252757058452176521972783046487651595646114145198',
	-- '89521972781670512164800658611431288950036249684756019965855064996704672611458003690422046484519118895219771288952195945765523646721191180',
	-- '1801894452295345274770909673470920128571972783040421585765943442159560421830203118065719189434346465180099673405792827585765197278894388721512889521961800311457278572611857642197096805796366125275705845217652197278304648765159564611414519889975112161518005953724348562510',
}

local words = {
	['3478'] = 'bonelord',
	['0'] = 'crap',
	['3646724'] = 'christmas',
	['14519'] = 'king',
	['19911800'] = 'hail',
	['56114519'] = 'ala',
	['353452756'] = 'aweeee',
	['8895219'] = 'then',
	['19'] = 'a',
	['3646'] = 'an',
	['561145'] = 'Hello',
}

function translate(text, wordList)
	local result = text
	for i=1,#wordList do
		result = string.gsub(result, wordList[i].code, (' ' .. wordList[i].translation .. ' '))
	end
	return result
end

function patternSearch(text, n, occurences)
	occurences = occurences or {}
	parsed = {}
	for i=1,string.len(text)-n+1 do
		local pattern = string.sub(text, i, i+n-1)
		occurences[pattern] = occurences[pattern] or { count=0, charactersL={}, charactersR={} }

		if not parsed[pattern] then
			parsed[pattern] = true
			occurences[pattern].count = occurences[pattern].count + 1

			if i == 1 then
				occurences[pattern].beginning = occurences[pattern].beginning or 0
				occurences[pattern].beginning = occurences[pattern].beginning + 1
			end

			if i > 1 then
				local c = string.sub(text, i-1, i-1)
				occurences[pattern].charactersL[c] = occurences[pattern].charactersL[c] or 0
				occurences[pattern].charactersL[c] = occurences[pattern].charactersL[c] + 1
			end

			if i+n <= string.len(text) then
				local c = string.sub(text, i+n, i+n)
				occurences[pattern].charactersR[c] = occurences[pattern].charactersR[c] or 0
				occurences[pattern].charactersR[c] = occurences[pattern].charactersR[c] + 1
			end

			local start = i+n
			while true do
				local pos = string.find(text, pattern, start)
				if not pos then break end

				if pos > 1 then
					local c = string.sub(text, pos-1, pos-1)
					occurences[pattern].charactersL[c] = occurences[pattern].charactersL[c] or 0
					occurences[pattern].charactersL[c] = occurences[pattern].charactersL[c] + 1
				end

				start = pos + n
				occurences[pattern].count = occurences[pattern].count + 1

				if start <= string.len(text) then
					local c = string.sub(text, start, start)
					occurences[pattern].charactersR[c] = occurences[pattern].charactersR[c] or 0
					occurences[pattern].charactersR[c] = occurences[pattern].charactersR[c] + 1
				end
			end
		end
	end
	return occurences
end

function printMostOccured(occurences, max)
	max = max or 3
	local rank = {}
	for pattern,data in pairs(occurences) do
		table.insert(rank, {pattern=pattern, count=data.count})
	end
	table.sort(rank, function(a, b) return a.count > b.count end)

	print('Most occurred patterns:')
	for i=1,math.min(#rank, max) do
		print(i .. ' ' .. rank[i].pattern .. '(' .. rank[i].count .. ')')
	end
end

function printLongest(occurences, max)
	max = max or 3
	local rank = {}
	for pattern,data in pairs(occurences) do
		table.insert(rank, {pattern=pattern, count=data.count})
	end
	table.sort(rank, function(a, b) return (string.len(a.pattern) == string.len(b.pattern) and a.count > b.count) or string.len(a.pattern) > string.len(b.pattern) end)

	print('Longest patterns:')
	for i=1,math.min(#rank, max) do
		print(i .. ' ' .. rank[i].pattern .. '(' .. rank[i].count .. ')')
	end
end

function printBiggestSubdivisions(occurences, max)
	max = max or 3
	local rank = {}
	for pattern,data in pairs(occurences) do
		table.insert(rank, {pattern=pattern, subdivisions=data.subdivisions, count=data.count})
	end
	table.sort(rank, function(a, b)
		--return string.len(a.pattern) > string.len(b.pattern)
		if a.subdivisions > b.subdivisions then
			return true
		elseif a.subdivisions == b.subdivisions then
			if string.len(a.pattern) > string.len(b.pattern) then
				return true
			elseif string.len(a.pattern) == string.len(b.pattern) then
				return a.count > b.count
			end
		end
		return false
	end)

	print('Biggest subdivisions patterns:')
	for i=1,math.min(#rank, max) do
		print(i .. ' ' .. rank[i].pattern .. '(' .. rank[i].subdivisions .. ') Count: ' .. rank[i].count)
	end
end

function printBeginning(occurences, max)
	max = max or 3
	local rank = {}
	for pattern,data in pairs(occurences) do
		if data.beginning then
			table.insert(rank, {pattern=pattern, count=data.count, beginning=data.beginning})
		end
	end
	table.sort(rank, function(a, b) return (a.beginning ==  b.beginning and string.len(a.pattern) > string.len(b.pattern)) or a.beginning > b.beginning end)

	print('beginning patterns:')
	for i=1,math.min(#rank, max) do
		print(i .. ' ' .. rank[i].pattern .. '(' .. rank[i].beginning .. ') Count: ' .. rank[i].count)
	end
end

function main()
	local minLength = 1
	local maxLength = nil

	-- Get books max length
	if not maxLength or maxLength == 0 then
		maxLength = 0
		for i=1,#books do
			maxLength = math.max(maxLength, string.len(books[i]))
		end
	end

	-- Search for patterns
	local occurences = {}
	for i=1,#books do
		for j=minLength,maxLength do
			patternSearch(books[i], j, occurences)
		end
	end

	-- Patterns with count 1 are not patterns.
	local total = 0
	for pattern,data in pairs(occurences) do
		if data.count <= 1 then
			occurences[pattern] = nil
		else
			total = total + 1
		end
	end
	print('Found ' .. total .. ' patterns.')

	-- Create subdivisions count. If a pattern means something, it'll appear several times. Adding another number to it will likely turn it meaningless. So big subdivisions counts means a word.
	for pattern,data in pairs(occurences) do
		local subdivisionsL = 0
		for character,count in pairs(data.charactersL) do
			subdivisionsL = subdivisionsL + 1
		end

		local subdivisionsR = 0
		for character,count in pairs(data.charactersR) do
			subdivisionsR = subdivisionsR + 1
		end

		data.subdivisions = math.max(subdivisionsL, subdivisionsR)

		-- This is part of a bigger pattern
		if subdivisionsL == 1 or subdivisionsR == 1 then
			data.toRemove = true -- Schedule remove, because a smaller pattern might be part of this one.
		end
	end

	-- Remove patterns that are inside another.
	total = 0
	for pattern,data in pairs(occurences) do
		if data.toRemove then
			occurences[pattern] = nil
		else
			total = total + 1
		end
	end
	print('Found ' .. total .. ' patterns.')

	-- Make some rankings
	printMostOccured(occurences)
	printLongest(occurences)
	printBiggestSubdivisions(occurences, 100)
	printBeginning(occurences, 100)

	-- Create usefull wordlist.
	local wordList = {}
	for code,translation in pairs(words) do
		table.insert(wordList, {code=code, translation=translation})
	end
	table.sort(wordList, function(a, b) return string.len(a.code) > string.len(b.code) end)

	-- Translate a book.
	print(translate(books[1], wordList))
end

main()
